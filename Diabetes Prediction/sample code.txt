import numpy as np
import pandas as pd
from flask import Flask ,render_template,request,flash,session,redirect,url_for,jsonify
from datetime import date
import bcrypt
import plotly.graph_objs as go
import os
import openai

app = Flask(__name__)
app.config['SECRET_KEY'] = 'diabetes'
import db
import pickle


global gluc
global ins
global predict_date
global gluc_list
global ins_list

dataset = pd.read_csv('diabetes.csv')
dataset_X = dataset.iloc[:,[1, 2, 5, 7]].values

from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range = (0,1))
dataset_scaled = sc.fit_transform(dataset_X)

logreg_model = pickle.load(open('logreg_model.pkl', 'rb'))
knn_model = pickle.load(open('knn_model.pkl', 'rb'))
svc_model = pickle.load(open('svc_model.pkl', 'rb'))
nb_model = pickle.load(open('nb_model.pkl', 'rb'))
decision_tree = pickle.load(open('decision_tree.pkl', 'rb'))
random_forest= pickle.load(open('random_forest.pkl', 'rb'))

def hash_it(password):
    
    bytes = password.encode('utf-8')
    hash = bcrypt.hashpw(bytes, b'$2b$12$ikFJLhhV.1ziQsq0cT94IO')
    hash=str(hash)
    return hash[2:-1]

@app.route('/')

@app.route('/index')
def index():
  return render_template('index.html')
@app.route('/signup',methods = ['POST', 'GET'])
def signup():
  if request.method == 'POST':
    name = request.form['name']
    email = request.form['email']
    phone = request.form['phone']
    password= request.form['password']
    hashed_password = hash_it(password)
    print(hashed_password)
    user_account = db.db.Users.find_one({"email":email})
    
    if user_account:
        return render_template('login.html',msg="You are already a member, please login using your details")
    else:
      db.db.Users.insert_one({"name":name,"email":email,"phone":phone,"password":hashed_password})
      return render_template('login.html', msg="Registered successfuly..")

         

@app.route('/signin',methods = ['POST', 'GET'])
def signin():
  if request.method == 'POST':
    email = request.form['email']
    password= request.form['password']
    signin_user = db.db.Users.find_one({'email':email })
    if signin_user and signin_user['password']==hash_it(password):
      global id
      session['loggedin'] = True
      session['name']= signin_user['name']
      session['email']=signin_user['email']
      id=session['email']
      msg = 'Welcome'+" "+session['name']+"!!"
      flash(msg)
      return redirect(url_for('predict'))
      return render_template('predict.html', msg = msg)
    else:
        msg = 'Incorrect username / password !'
        return render_template('login.html', msg = msg)
          


            



@app.route('/register')
def register():
  return render_template('register.html')

@app.route("/predict")
def predict():
  print(session.get('email'))
  if  not session.get('email'):
      return render_template('login.html')
  else:
    return render_template('predict.html')
  

@app.route("/prediction",methods=['POST'])
def prediction():
      
    global gluc 
    global ins 
    today = date.today()
    today = str(today)
    signin_user = db.db.Users.find_one({'email':id })
    user = signin_user['email']
    glucose = request.form['Glucose Level']
    insulin = request.form['Insulin']
    age = request.form['Age']
    BMI= request.form['BMI']
    
    gluc=glucose
    ins = insulin
    print(gluc,ins)
    db.db.History.insert_one({"date":today,"user":user,"glucose":glucose,"insulin":insulin,"age":age,"BMI":BMI})

    prediction_results=[]
    float_features = [float(x) for x in request.form.values()]
    final_features = [np.array(float_features)]
    logreg_prediction = logreg_model.predict( sc.transform(final_features) )
    knn_prediction = knn_model.predict( sc.transform(final_features) )
    nb_prediction = nb_model.predict( sc.transform(final_features) )
    svc_prediction = svc_model.predict( sc.transform(final_features) )
    dt_prediction = decision_tree.predict( sc.transform(final_features) )
    rf_prediction = random_forest.predict( sc.transform(final_features) )
    prediction_results.append(logreg_prediction[0])
    prediction_results.append(knn_prediction[0])
    prediction_results.append(nb_prediction[0])
    prediction_results.append(svc_prediction[0])
    prediction_results.append(dt_prediction[0])
    prediction_results.append(rf_prediction[0])

    print(prediction_results)
    if(prediction_results.count(1.0)> prediction_results.count(0.0)):
          prediction=1
    else:
          prediction=0

    print(prediction)

    if prediction == 1:
        pred = "You have Diabetes, please consult a Doctor."
    elif prediction == 0:
        pred = "You don't have Diabetes."
    output = pred

    return render_template("predict.html",msg=output)


@app.route('/result')
def result():
      
      global gluc
      global ins
      global predict_date
      global gluc_list
      global ins_list
      
     

      x = ['glucose']
      y = [int(gluc)]

      data = go.Bar(x=x, y=y,width=0.1)

      layout = go.Layout(
          title='Glucose Level',
          xaxis=dict(title='X Axis'),
          yaxis=dict(title='Y Axis'),
          width=700,
          height=500
      )

      fig = go.Figure(data=data, layout=layout)
      fig.add_hline(y=125)
      chart1= fig.to_html(full_html=False)

      x = ['Insulin']
      y = [int(ins)]

      data = go.Bar(x=x, y=y,width=0.1)

      layout = go.Layout(
          title='Insulin Level',
          xaxis=dict(title='X Axis'),
          yaxis=dict(title='Y Axis'),
          width=700,
          height=500
      )

      fig = go.Figure(data=data, layout=layout)
      fig.add_hline(y=100)
      chart2= fig.to_html(full_html=False)

      

      return render_template('result.html',chart1=chart1,chart2=chart2)


@app.route('/history')
def history():
      
  if not session.get('email'):
        return render_template('login.html')
  else:
    global predict_date
    global gluc_list
    global ins_list
    signin_user = db.db.Users.find_one({'email':id })
    user = signin_user['email']
    user_history = list(db.db.History.find({'user':user}))
    date_history=[]
    glucose_history=[]
    insulin_history=[]
    print(user_history)
    for i in user_history:
      date_history.append(i['date'])
      glucose_history.append(int(i['glucose']))
      insulin_history.append(int(i['insulin']))
    predict_date= date_history 
    gluc_list = glucose_history
    ins_list = insulin_history
    from datetime import datetime

    dates1=predict_date
    values1= gluc_list
    dates2= predict_date
    values2= ins_list
    dates1 = [datetime.strptime(date, '%Y-%m-%d') for date in dates1]
    dates2 = [datetime.strptime(date, '%Y-%m-%d') for date in dates2]
    trace1 = go.Scatter(
        x=dates1,
        y=values1,
        mode='lines+markers',  # Show both lines and markers on the chart
        name='Glucose Levels'  # Name the first line
    )
    trace2 = go.Scatter(
        x=dates2,
        y=values2,
        mode='lines+markers',  # Show both lines and markers on the chart
        name='Insulin Levels'  # Name the second line
    )
    layout = go.Layout(
        title='History of Glucose and Insulin Levels',
        xaxis=dict(title='Date'),
        yaxis=dict(title='Value'),
        width=800,
        height=500
    )
    fig = go.Figure(data=[trace1, trace2], layout=layout)
    chart3= fig.to_html(full_html=False)
    return render_template("history.html",records=user_history,chart3=chart3)
	
    
@app.route('/login')
def login():
    return render_template('login.html')

@app.route('/diet')
def diet():
    return render_template('diet.html')

@app.route('/chatbot')
def chatbot():
    return render_template('chatbot.html')

def chatbot(argument):
    openai.api_key = ""
    response = openai.Completion.create(
    model="text-davinci-003",
    prompt=argument,
    temperature=0.5,
    max_tokens=1024,
    top_p=1,
    frequency_penalty=0,
    presence_penalty=0
    )
    answer=str(response.choices[0].text)
    return answer
# print(chatbot("what is normal glucose level?"))

@app.route("/chat",methods=['POST'])
def chat():
      
  
    query= request.form['message']
    msg=chatbot(query)
    return render_template('chatbot.html',msg=msg)
@app.route('/logout')
def logout():
  session.pop('loggedin', None)
  session.pop('id', None)
  session.pop('email', None)
  return redirect(url_for('index'))
      

if __name__ =='__main__':
    app.run(host='0.0.0.0',debug=True)

ones_count = 9
zeros_count = 16


[0.01290322580645159, 0.022170532917621392, 0.024038461538461536, 0.02955882103144587, 0.030861908797313913, 0.03148034686098889, 0.03442447725980403, 0.03533564594366052, 0.03663032191517412, 0.039375695713126976, 0.04053271560350405, 0.040923916675140455, 0.04255915513179694, 0.04255915513179697, 0.04377138381238758, 0.044133886784313965, 0.04434106583524273, 0.04434518811270006, 0.045559385648529356, 0.04556628972219045, 0.045566289722190595, 0.04850787401646719, 0.0493521156722628, 0.05048076923076922, 0.05161290322580642, 0.05288461538461539, 0.05342761616556033, 0.05342761616556033, 0.05342761616556033, 0.05342761616556033, 0.05342761616556033, 0.05342761616556033, 0.05342761616556033, 0.05346582222813043, 0.05346582222813043, 0.05346582222813043, 0.05381573634344802, 0.053815736343448044, 0.054963655312822136, 0.054963655312822136, 0.054963655312822136, 0.054963655312822136, 0.054963655312822136, 0.05496365531282215, 0.05496365531282215, 0.05496365531282215, 0.05682534602280982, 0.05682534602280982, 0.05682534602280982, 0.05682534602280982, 0.05682534602280982, 0.05682534602280982, 0.05682534602280984, 0.05682534602280984, 0.05682534602280984, 0.05682534602280984, 0.05682534602280984, 0.05854759672445902, 0.05933365919934114, 0.059333659199341166, 0.059333659199341166, 0.06241067933824452, 0.06241067933824452, 0.06241067933824452, 0.06241067933824452, 0.06241067933824455, 0.06296069372197774, 0.06320107049499259, 0.06597688455091637, 0.06597688455091637, 0.06597688455091637, 0.06597688455091648, 0.06597688455091648, 0.06597688455091648, 0.0699575036199467, 0.0699575036199467, 0.0699575036199467, 0.0699575036199467, 0.0699575036199467, 0.0699575036199467, 0.0699575036199467, 0.0699575036199467, 0.06995750361994674, 0.06995750361994674, 0.06995750361994674, 0.06995750361994674, 0.07046201662138188, 0.07067129188732117, 0.0710032935367224, 0.07117034376818844, 0.07146472367875352, 0.0735564779738566, 0.07419216251236824, 0.07428594718068082, 0.07428594718068082, 0.07428594718068082, 0.07428594718068082, 0.07428594718068082, 0.07428594718068082, 0.07428594718068095, 0.07428594718068095, 0.07428594718068095, 0.07428594718068095, 0.07466751957646964, 0.07890499478761208, 0.07890499478761208, 0.07890499478761208, 0.0789049947876121, 0.07918338753306957, 0.08045943970629767, 0.08376658686159659, 0.08376658686159659, 0.08376658686159659, 0.08376658686159659, 0.08376658686159663, 0.08376658686159663, 0.08376658686159663, 0.08376658686159663, 0.08376658686159663, 0.08376658686159663, 0.08508919344914055, 0.08511831026359394, 0.08661637150567443, 0.08883090996131844, 0.08883090996131844, 0.08883090996131844, 0.08883090996131844, 0.08883090996131844, 0.08883090996131844, 0.08883090996131844, 0.08883090996131858, 0.08883090996131858, 0.08883090996131858, 0.08922877360007211, 0.09045044212013068, 0.0940652256297537, 0.0940652256297537, 0.0940652256297537, 0.09406522562975374, 0.09406522562975374, 0.09411357080940204, 0.09548913890866112, 0.09548913890866112, 0.09572707183173225, 0.09574218018879177, 0.09676238733894396, 0.09808247504857909, 0.09944269404588361, 0.09944269404588361, 0.09944269404588361, 0.09944269404588361, 0.09944269404588361, 0.09944269404588375, 0.09944269404588375, 0.10082422568300113, 0.1011783034728607, 0.10142063328782883, 0.10317890742331688, 0.10398068404755921, 0.10406058160322004, 0.10412612325617536, 0.10413709462899912, 0.10494131094824431, 0.10494131094824431, 0.10494131094824431, 0.10494131094824431, 0.10494131094824431, 0.10494131094824431, 0.10494131094824431, 0.10494131094824435, 0.10494131094824435, 0.10494131094824435, 0.10596581281983287, 0.10989096574552225, 0.11020957518313555, 0.11033403022015084, 0.11054299935353268, 0.11054299935353268, 0.11054299935353268, 0.11054299935353268, 0.11054299935353282, 0.11054299935353282, 0.11054299935353282, 0.11058371172464268, 0.11146849552256967, 0.11298076923076922, 0.11433455299934135, 0.11462048183011958, 0.11489061622655018, 0.11490811624822687, 0.11490944460245824, 0.1162328580338636, 0.1162328580338636, 0.1162328580338636, 0.1162328580338636, 0.1162328580338636, 0.11623285803386364, 0.11623285803386364, 0.11623285803386364, 0.11749568903710071, 0.11859089242572847, 0.11865188556849772, 0.11882650733156452, 0.119422293561134, 0.11965226293959678, 0.11975193881053248, 0.11985535595209075, 0.12199855116136249, 0.12199855116136249, 0.12199855116136249, 0.12199855116136255, 0.12199855116136255, 0.12199855116136255, 0.12199855116136255, 0.12199855116136255, 0.12199855116136255, 0.12295718844158696, 0.12316848816333735, 0.12323105355945327, 0.12343744197089802, 0.12343744197089807, 0.12530594160705075, 0.12636672306175656, 0.12756709342085826, 0.1275927167206118, 0.12760381921233105, 0.12782981773564808, 0.12782981773564808, 0.12945687599577646, 0.12959083891044126, 0.1299570502551197, 0.13124270175414005, 0.13126219948851225, 0.13290802136665947, 0.13311176494455762, 0.1337180793209826, 0.1337180793209826, 0.1337180793209826, 0.13371807932098265, 0.13371807932098265, 0.13371807932098265, 0.13371807932098265, 0.13547847406515198, 0.13588644032619174, 0.13965612693456136, 0.13965612693456136, 0.13965612693456136, 0.13965612693456136, 0.13965612693456136, 0.13965612693456153, 0.13965612693456153, 0.14122598979896545, 0.1418933152763041, 0.14201688451381822, 0.14280781113125388, 0.1429683438109444, 0.14307592695951613, 0.14340357610294022, 0.14395669215018064, 0.1456378709729656, 0.1456378709729656, 0.1456378709729656, 0.14563787097296566, 0.14563787097296566, 0.14587070625260073, 0.1479772462689552, 0.14992189767962777, 0.15004972473684167, 0.15157966838670903, 0.1516581410634463, 0.1516581410634463, 0.15165814106344647, 0.15244063144131825, 0.15388042234707858, 0.15423484971157844, 0.1543095439865696, 0.15431966748039727, 0.15530450065227402, 0.15598115598243995, 0.1577125253688125, 0.1577125253688125, 0.1577125253688125, 0.1577125253688125, 0.15771252536881256, 0.15803263809343945, 0.15836820666999774, 0.15920524576756456, 0.1609188794125953, 0.1620160399673001, 0.16290528175726993, 0.1637972410747586, 0.1637972410747586, 0.1637972410747586, 0.1637972410747586, 0.1637972410747586, 0.16516824392733817, 0.16543507944535238, 0.16579706073180558, 0.16810971515986237, 0.1699090295637727, 0.1699090295637727, 0.1699090295637727, 0.1699090295637727, 0.1699090295637727, 0.16990902956377288, 0.16990902956377288, 0.16990902956377288, 0.16990902956377288, 0.17057949464982905, 0.17229918991063484, 0.17229918991063484, 0.17353685615535225, 0.17355723706601064, 0.174880114521939, 0.17530071803555272, 0.17584436281218657, 0.17604507118635712, 0.17604507118635712, 0.17604507118635712, 0.17604507118635718, 0.17604507118635718, 0.17667822971830285, 0.17833823746279745, 0.1784575472001441, 0.17960333094745604, 0.17972205511876466, 0.18132440306087586, 0.18133136418176746, 0.18216302809384474, 0.18220291564303312, 0.18220291564303312, 0.18220291564303312, 0.18220291564303312, 0.18220291564303312, 0.18226515888876202, 0.18363045787689966, 0.18474093894855773, 0.1852249727420973, 0.18655134733675377, 0.18745903733249458, 0.18780900974189194, 0.18838042485019799, 0.18838042485019799, 0.1893033813611648, 0.18930338136116484, 0.18988977145326524, 0.19287347981447692, 0.19317503318538864, 0.1939731230971255, 0.19457572583127133, 0.19457572583127133, 0.1945757258312715, 0.1945757258312715, 0.1945757258312715, 0.19522753360163314, 0.19532289689184407, 0.19557727501902358, 0.1960133078211031, 0.19623730176919427, 0.19640450553232178, 0.19666189970716597, 0.2003608292762935, 0.20048109735189856, 0.20051340775471246, 0.20078717169405316, 0.20078717169405316, 0.20078717169405316, 0.20078717169405316, 0.20078717169405316, 0.20078717169405316, 0.20078717169405322, 0.2011485992657441, 0.20135393811703758, 0.20197277066393282, 0.20443610521156452, 0.20571989875176708, 0.20662297743814118, 0.20674071642248296, 0.20680894998138682, 0.20701330915942204, 0.20701330915942204, 0.20701330915942204, 0.20753324353251784, 0.2077933768949179, 0.20828125101007278, 0.2083598339250307, 0.2103586581146809, 0.21109179065441114, 0.21201387566196359, 0.2120224116650065, 0.2126043948234016, 0.21274998289940564, 0.21300636667807815, 0.21325285142168157, 0.21325285142168157, 0.21325285142168157, 0.21325285142168157, 0.21325285142168157, 0.21325285142168157, 0.21325285142168174, 0.2147776624037891, 0.21509849974362902, 0.21549311813967328, 0.21583256934175177, 0.21850228373571953, 0.21950465536732322, 0.21950465536732322, 0.22014698288833245, 0.22076776269484388, 0.22122235706612817, 0.22290513050776947, 0.22383320326408432, 0.22479546829946676, 0.22576770237233443, 0.22576770237233443, 0.2257677023723345, 0.22592454250944058, 0.22771745628273682, 0.22905860283088872, 0.22945503033403097, 0.2316109960403823, 0.23171366786669287, 0.23191235907012492, 0.2320410820504525, 0.2320410820504525, 0.2320410820504525, 0.23256885096904603, 0.23257411452526264, 0.23325151178572198, 0.23832397844512576, 0.23832397844512576, 0.23832397844512576, 0.23832397844512576, 0.2383239784451258, 0.23847256063440467, 0.23889005692733592, 0.23911290322580644, 0.2391868603089951, 0.24108359914176644, 0.242226839897824, 0.24313109692596976, 0.2438702349325935, 0.2446156582534873, 0.2446156582534873, 0.2446156582534873, 0.2446156582534873, 0.2446156582534873, 0.2446156582534873, 0.24461565825348733, 0.24688617530917545, 0.2468952703785113, 0.24699584044960718, 0.2471358262731556, 0.2471358262731556, 0.24844491838201208, 0.248519563584031, 0.2507052144040922, 0.2509154607467764, 0.2509154607467764, 0.2509154607467764, 0.25383630735053453, 0.25722278911257734, 0.2572227891125775, 0.2572227891125775, 0.26120880653915357, 0.2612584458151487, 0.2630548747918556, 0.26353710299319516, 0.2635371029931952, 0.2635371029931952, 0.2635371029931952, 0.2635371029931952, 0.2643298942402729, 0.2645542887741046, 0.26519616943519386, 0.2671006185996021, 0.26985791203398984, 0.2698579120339899, 0.26989663890886145, 0.26994205394604404, 0.2701765805673381, 0.27095344404558847, 0.27122080812391425, 0.2719970462726512, 0.2761847702874824, 0.2761847702874824, 0.27618477028748245, 0.2792556439721903, 0.27969748701636976, 0.28007282692177454, 0.28090931923873774, 0.2823173475879478, 0.2825172713450637, 0.2839950444196105, 0.28468137507275376, 0.28545685007285804, 0.28690855910966495, 0.2872702906205672, 0.2874569358713457, 0.28810843399811, 0.28857026053519197, 0.28885504408937956, 0.2888550440893797, 0.2888550440893797, 0.29270374061681487, 0.2933319596022771, 0.29802269423024336, 0.29874509756847606, 0.29928121052076617, 0.29986842081401754, 0.3015450747822454, 0.3015450747822454, 0.3015450747822455, 0.3015450747822455, 0.3015450747822455, 0.3029215782741356, 0.3036136451741945, 0.3055732588294505, 0.3078967357205422, 0.3096907534455775, 0.3111317903799734, 0.31148927579290375, 0.312789992917956, 0.3142524689281009, 0.31460671341529883, 0.3154517366305188, 0.316341385277373, 0.3189640280553335, 0.31976390598215554, 0.3206120322220531, 0.3206120322220531, 0.321473578709279, 0.3232037952138226, 0.3256394949348442, 0.32697520212060227, 0.32703368486888357, 0.32952582014263077, 0.330492949922021, 0.3312725717409499, 0.3321716088546201, 0.33334177208410104, 0.33334177208410104, 0.33334177208410115, 0.33340758175200363, 0.3355613713860443, 0.3379982575905404, 0.3381800444615773, 0.3396227066188422, 0.342877492477201, 0.3460843615351716, 0.3460843615351716, 0.34691594315696966, 0.34899138930592255, 0.3497413414438547, 0.3523781374363767, 0.35894130964004806, 0.3604267744159727, 0.3612128041263014, 0.36139601204704697, 0.36521939619845095, 0.366331288264609, 0.36708933369187347, 0.36853732514787924, 0.37102902284279315, 0.3716028004234601, 0.3716028004234601, 0.3716028004234601, 0.3772436409263126, 0.3779885207564656, 0.38076658786589646, 0.3814034431502576, 0.3838139516096706, 0.3907664555206669, 0.3907664555206669, 0.3967180979754023, 0.39686358179718817, 0.39715846101475266, 0.3971584610147527, 0.3971584610147527, 0.3971584610147527, 0.4035523636024628, 0.40550570175341133, 0.413298508718527, 0.4135767876017276, 0.41399512172023073, 0.4193548387096775, 0.41943922931013355, 0.4227445930090105, 0.4261879556355514, 0.42914524860972897, 0.4355474078769891, 0.4375882548117804, 0.4419510054638736, 0.4576234341777184, 0.4579417014637235, 0.4607881829378052, 0.46477748192055124, 0.4661261308850343, 0.46757859692275044, 0.4739885274064584, 0.47558446849050934, 0.47865741258131805, 0.4803995738380126, 0.4810382217584265, 0.48681169212812836, 0.4870059573606746, 0.48739763138915715, 0.4983241587442493, 0.49963897920877315, 0.5202006483059275, 0.53265245017242, 0.5581799013856811, 0.6356800326426717, 0.8134161950212975]
ones_count = 9
zeros_count = 16



 [0.15483871 0.04206731 0.35378323 0.43333333]

0.50322581 0.22355769